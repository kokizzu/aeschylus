#! /bin/sh

set -e

AUDIO_FMT="s16"
AUDIO_RATE="48000"
# Period of time (in seconds) to fade in/out at the beginning/end of the file.
FADE_IN_OUT=0.5
# How quiet must a channel peak at be to be considered as not having a useful
# signal?
MUTE_THRESHOLD="-20"

if [ $# -ne 2 ]; then
    echo "podcast_audio_process <input.flac> <output.flac>" > /dev/stderr
    exit 1
fi

for cmd in ffmpeg ffmpeg-normalize python3 ; do
    which $cmd 2> /dev/null > /dev/null || ( echo "'$cmd' not installed" > /dev/stderr ; exit 1 )
done

td=`mktemp -d`

echo -n "===> Detect stereo/mono"
num_channels=`ffprobe -i $1 -show_entries stream=channels -select_streams a:0 -of compact=p=0:nk=1 -v 0`
if [[ $num_channels == 1 ]]; then
    pan="anull"
    dualmono="--dual-mono"
    compressor_so="sc4m_1916"
    compressor_name="sc4m"
    echo ": mono"
elif [[ $num_channels == 2 ]]; then
    left_peak=`ffmpeg -i $1 -af "channelsplit=channels=FL,astats=metadata=1" -f null - 2>&1 | grep "Peak level dB" | tail -n 1 | cut -d ":" -f 2`
    right_peak=`ffmpeg -i $1 -af "channelsplit=channels=FR,astats=metadata=1" -f null - 2>&1 | grep "Peak level dB" | tail -n 1 | cut -d ":" -f 2`
    if [ `echo "$left_peak < ${MUTE_THRESHOLD} && $right_peak < ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        # We don't seem to have much signal in either channel: we'd best let everything through!
        pan="anull"
        dualmono=""
        compressor_so="sc4_1882"
        compressor_name="sc4"
        echo ": stereo"
    elif [ `echo "$left_peak > ${MUTE_THRESHOLD} && $right_peak > ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        # Both channels have a strong signal.
        pan="anull"
        dualmono=""
        compressor_so="sc4_1882"
        compressor_name="sc4"
        echo ": stereo"
    elif [ `echo "$left_peak < ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        pan="pan=mono|c0=FR"
        dualmono="--dual-mono"
        compressor_so="sc4m_1916"
        compressor_name="sc4m"
        echo ": stereo (keeping right channel; ignoring left channel)"
    else
        pan="pan=mono|c0=FL"
        dualmono="--dual-mono"
        compressor_so="sc4m_1916"
        compressor_name="sc4m"
        echo ": stereo (keeping left channel; ignoring right channel)"
    fi
else
    echo "Can't deal with input file with $num_channels channels" > /dev/stderr
    exit 1
fi

echo "===> Pan and normalise"
ffmpeg \
  -hide_banner \
  -i $1 \
  -filter_complex " \
    [0:a]${pan}" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/panned.flac
ffmpeg-normalize ${td}/panned.flac -o ${td}/panned_normalised.flac -c:a flac  \
  -t -25 ${dualmono} \
  -ar ${AUDIO_RATE} -e "-compression_level 1 -sample_fmt ${AUDIO_FMT}" -pr

echo "===> Apply noisegate and compressor to audio"
# Apply a noisegate and then a compressor to the mono audio. For guidance on
# compression see e.g.:
#   https://gist.github.com/scottburton11/3222152
#   https://music.tutsplus.com/tutorials/a-master-guide-to-voice-compression-how-to--compress-voice-recordings--cms-25105
# For the noisegate see e.g.:
#   https://www.youtube.com/embed/piXenxM355o?rel=0
# I'm a little more conservative with my noisegate settings, since it's better
# not to overdo it.
signal_level=-18
noisegate_threshold=-40
compressor_lower_threshold=`python3 -c "print(${signal_level} - 9)"`
compressor_upper_threshold=`python3 -c "print(${signal_level} + 3)"`
length=`ffprobe -i $1 -show_entries format=duration -v quiet -of csv="p=0"`
length_minus_fade=`python3 -c "print(${length} - ${FADE_IN_OUT})"`
ffmpeg \
  -hide_banner \
  -i ${td}/panned_normalised.flac \
  -filter_complex " \
    [0:a]highpass=frequency=80[a]; \
    [a]agate=mode=downward:range=-10dB:threshold=${noisegate_threshold}dB: \
      ratio=2:attack=1.5:release=120:knee=7dB[a]; \
    [a]ladspa=file=${compressor_so}:p=${compressor_name}:c=c0=0|c1=1.5ms|c2=4ms| \
      c3=${compressor_upper_threshold}db|c4=6|c5=3db[a]; \
    [a]ladspa=file=${compressor_so}:p=${compressor_name}:c=c0=0|c1=2ms|c2=12ms| \
      c3=${compressor_lower_threshold}db|c4=2|c5=8db[a]; \
    [a]afade=t=in:curve=qsin:st=0:d=${FADE_IN_OUT}[a]; \
    [a]afade=t=out:curve=qsin:st=${length_minus_fade}:d=${FADE_IN_OUT}" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/gated_compressed.flac

echo "===> Normalise audio"
# Normalise the audio and produce a final mkv file. Podcasts typically vary
# between -16 and -20 LUFS.
ffmpeg-normalize ${td}/gated_compressed.flac -o $2 -c:a flac  \
  -t -16 -lrt 10 -tp -1 ${dualmono} \
  -ar ${AUDIO_RATE} -e "-compression_level 12 -sample_fmt ${AUDIO_FMT}" -pr

rm -rf ${td}
