#! /bin/sh

set -e

AUDIO_FMT="s16"
AUDIO_RATE="48000"
# Period of time (in seconds) to fade in/out at the beginning/end of the file.
FADE_IN_OUT=0.5
# How quiet must a channel peak at be to be considered as not having a useful
# signal?
MUTE_THRESHOLD="-20"

if [ $# -ne 2 ]; then
    echo "podcast_audio_process <input.flac> <output.flac>" > /dev/stderr
    exit 1
fi

if [ -f $2 ]; then
    echo "$2 already exists" > /dev/stderr
    exit 1
fi

for cmd in ffmpeg ffmpeg-normalize python3 ; do
    which $cmd 2> /dev/null > /dev/null || ( echo "'$cmd' not installed" > /dev/stderr ; exit 1 )
done

td=`mktemp -d`
stage=1

echo -n "===> ${stage}: Detect stereo/mono"
num_channels=`ffprobe -i $1 -show_entries stream=channels -select_streams a:0 -of compact=p=0:nk=1 -v 0`
if [[ $num_channels == 1 ]]; then
    pan="anull"
    dualmono="--dual-mono"
    compressor_so="sc4m_1916"
    compressor_name="sc4m"
    echo ": mono"
elif [[ $num_channels == 2 ]]; then
    left_peak=`ffmpeg -i $1 -af "channelsplit=channels=FL,astats=metadata=1" -f null - 2>&1 | grep "Peak level dB" | tail -n 1 | cut -d ":" -f 2`
    right_peak=`ffmpeg -i $1 -af "channelsplit=channels=FR,astats=metadata=1" -f null - 2>&1 | grep "Peak level dB" | tail -n 1 | cut -d ":" -f 2`
    if [ `echo "$left_peak < ${MUTE_THRESHOLD} && $right_peak < ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        # We don't seem to have much signal in either channel: we'd best let everything through!
        pan="anull"
        dualmono=""
        compressor_so="sc4_1882"
        compressor_name="sc4"
        echo ": stereo"
    elif [ `echo "$left_peak > ${MUTE_THRESHOLD} && $right_peak > ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        # Both channels have a strong signal.
        pan="anull"
        dualmono=""
        compressor_so="sc4_1882"
        compressor_name="sc4"
        echo ": stereo"
    elif [ `echo "$left_peak < ${MUTE_THRESHOLD}" | bc` -eq 1 ]; then
        pan="pan=mono|c0=FR"
        dualmono="--dual-mono"
        compressor_so="sc4m_1916"
        compressor_name="sc4m"
        echo ": stereo (keeping right channel; ignoring left channel)"
    else
        pan="pan=mono|c0=FL"
        dualmono="--dual-mono"
        compressor_so="sc4m_1916"
        compressor_name="sc4m"
        echo ": stereo (keeping left channel; ignoring right channel)"
    fi
else
    echo "Can't deal with input file with $num_channels channels" > /dev/stderr
    exit 1
fi

stage=$((stage+1))
echo "===> ${stage}: Pan"
# Pre-normalise the audio level so that our subsequent settings have (mostly)
# predictable effects from one file to another.
ffmpeg \
  -hide_banner \
  -i $1 \
  -filter_complex " \
    [0:a]${pan}" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: High-pass"
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a "highpass=frequency=80" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: EQ 250Hz"
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a "equalizer=f=250:width_type=q:width=0.8:gain=-4" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: Normalise"
ffmpeg-normalize ${td}/$((stage-1)).flac -o ${td}/${stage}.flac -c:a flac  \
  -t -25 ${dualmono} \
  -ar ${AUDIO_RATE} -e "-compression_level 1 -sample_fmt ${AUDIO_FMT}" -pr

stage=$((stage+1))
echo "===> ${stage}: Noisegate"
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a "agate=mode=downward:range=-8dB:threshold=-42dB:ratio=3:attack=1.5:release=275:knee=5dB" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: Normalise"
ffmpeg-normalize ${td}/$((stage-1)).flac -o ${td}/${stage}.flac -c:a flac  \
  -t -25 ${dualmono} \
  -ar ${AUDIO_RATE} -e "-compression_level 1 -sample_fmt ${AUDIO_FMT}" -pr

stage=$((stage+1))
echo "===> ${stage}: Compress"
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a \
    "ladspa=file=${compressor_so}:p=${compressor_name}: \
    c=c0=0|c1=20ms|c2=50ms|c3=-20db|c4=2|c5=3db" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: Compress"
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a \
    "ladspa=file=${compressor_so}:p=${compressor_name}: \
    c=c0=0|c1=2.5ms|c2=15ms|c3=-30db|c4=2.5|c5=5db" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: Fade beginning/end in/out"
length=`ffprobe -i $1 -show_entries format=duration -v quiet -of csv="p=0"`
length_minus_fade=`python3 -c "print(${length} - ${FADE_IN_OUT})"`
ffmpeg \
  -hide_banner \
  -i ${td}/$((stage-1)).flac \
  -filter:a \
    "afade=t=in:curve=qsin:st=0:d=${FADE_IN_OUT}, \
    afade=t=out:curve=qsin:st=${length_minus_fade}:d=${FADE_IN_OUT}" \
  -c:a flac -ar ${AUDIO_RATE} -sample_fmt ${AUDIO_FMT} -compression_level 1 \
  ${td}/${stage}.flac

stage=$((stage+1))
echo "===> ${stage}: Normalise"
ffmpeg-normalize ${td}/$((stage-1)).flac -o $2 -c:a flac  \
  -t -13 -tp -1 ${dualmono} \
  -ar ${AUDIO_RATE} -e "-compression_level 12 -sample_fmt ${AUDIO_FMT}" -pr

rm -rf ${td}
